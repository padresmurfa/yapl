------------------------------------------------------------------------------------------------------------------------
-- This module contains the Garden class, which is an abstraction for a garden that can be foraged for carrots by a
-- rabbit.
------------------------------------------------------------------------------------------------------------------------
module garden


from types import carrot_matrix, position, carrots


export garden


------------------------------------------------------------------------------------------------------------------------
-- An abstraction for a garden that can be foraged by a rabbit for carrots.
------------------------------------------------------------------------------------------------------------------------
type garden : class:


    --------------------------------------------------------------------------------------------------------------------
    -- public constructor
    --------------------------------------------------------------------------------------------------------------------


        ----------------------------------------------------------------------------------------------------------------
        -- Initialize a garden.
        ----------------------------------------------------------------------------------------------------------------
        constructor:
            input:
                using_initial_state : carrot_matrix     --  The initial state to use for the garden
            code:
                my_carrot_matrix = using_initial_state


    --------------------------------------------------------------------------------------------------------------------
    -- public properties
    --------------------------------------------------------------------------------------------------------------------


        ----------------------------------------------------------------------------------------------------------------
        -- The number of rows in the garden.
        ----------------------------------------------------------------------------------------------------------------
        getter rows : integer and >= 1:
            code:
                return rows = my_carrot_matrix.length


        ----------------------------------------------------------------------------------------------------------------
        -- The number of columns in the garden.
        ----------------------------------------------------------------------------------------------------------------
        getter columns : integer and >= 1
            code:
                first_row = my_carrot_matrix.get(item_at=0)
                return columns = first_row.length


    --------------------------------------------------------------------------------------------------------------------
    -- public methods
    --------------------------------------------------------------------------------------------------------------------


        ----------------------------------------------------------------------------------------------------------------
        -- Determine a list of squares that could be considered the center of this garden.
        ----------------------------------------------------------------------------------------------------------------
        generator get_possible_centers:
            returns:
                possible_centers : [position]   -- the possible centers of the garden.
            code:
                possible_rows    = get_possible_center_values(for_length=rows)
                possible_columns = get_possible_center_values(for_length=columns)

                -- iterate over all the rows that could be considered at the center
                for row in possible_rows:

                    -- iterate over all the columns that could be considered at the center
                    for col in possible_columns:

                        -- calculate and yield a possible center
                        possible_row    = row + rows / 2
                        possible_column = col + columns / 2
                        yield possible_center = recycler.new position(possible_row, possible_column) -- a possible center of the garden


        ----------------------------------------------------------------------------------------------------------------
        -- Determine a list of possible squares to move to within the garden, from a given position.
        ----------------------------------------------------------------------------------------------------------------
        generator get_possible_moves:
            input:
                around_position : position      -- the starting position to retrieve legal moves around.
            returns:
                moves           : [position]    -- the set of possible moves around position within the garden.
            code:
                offsets = [-1, 1]

                -- iterate over relevant offsets 
                for offset in offsets:

                    -- iterate over squares that are positioned around the offsets
                    for square in pair_of_squares(offset_by=offset, around_position):

                        -- yield a move, if it is within our bounds
                        if within_bounds = is_within_our_bounds(position=square):
                            yield move = square                     -- a possible move around position within the garden


        ----------------------------------------------------------------------------------------------------------------
        -- Retrieve the number of carrots in a given garden-square.
        ----------------------------------------------------------------------------------------------------------------
        method get_carrots:
            input:
                at_position : position      -- the position of the garden-square
            returns:
                got_carrots : carrots       -- the number of carrots in the square.
            code:
                row = my_carrot_matrix.get(item_at=at_position.row)
                return got_carrots = row.get(item_at=at_position.col)


        ----------------------------------------------------------------------------------------------------------------
        -- Eat (i.e. clear) the carrots at the given position, and determine how many carrots were in the square.
        ----------------------------------------------------------------------------------------------------------------
        method eat_carrots_at:
            input:
                at_position : position      -- the position to eat carrots at
            returns:
                eaten       : carrots       -- the number of carrots that were eaten
            code:
                -- determine how many carrots are at our position
                eaten = get_carrots(at_position)

                -- clear the carrots at our position
                row   = my_carrot_matrix.get(item_at=at_position.row)
                row.set(item_at=at_position.col, value=0)

                -- return the number of carrots that we ate
                return eaten


    --------------------------------------------------------------------------------------------------------------------
    -- private state
    --------------------------------------------------------------------------------------------------------------------


        ----------------------------------------------------------------------------------------------------------------
        -- carrot_matrix is a bi-dimensional array of garden-squares, where each square contains the number
        -- of carrots that are currently to be found at that position in the garden.
        ----------------------------------------------------------------------------------------------------------------
        member my_carrot_matrix : carrot_matrix is not empty


    --------------------------------------------------------------------------------------------------------------------
    -- private helper methods
    --------------------------------------------------------------------------------------------------------------------


        ----------------------------------------------------------------------------------------------------------------
        -- determine the possible centers for rows or columns of the provided length
        ----------------------------------------------------------------------------------------------------------------
        generator get_possible_center_values:
            input:                
                for_length      : integer and >= 1        -- the length of the row or column
            returns:
                possibilities   : [integer]               -- the possible centers, given the provided length
            code:
                -- create and return the first possible center
                center = length / 2
                yield possibility = center                -- the first possible center

                -- create and return the second possible center
                if is_even = for_length is even:
                    yield possibility = center - 1        -- the second possible center


        ----------------------------------------------------------------------------------------------------------------
        -- create a pair of squares around a position
        ----------------------------------------------------------------------------------------------------------------
        generator pair_of_squares:
            input:                
                offset_by       : integer and in [-1, +1]    -- the offset from the position, both horizontally and vertically
                around_position : position                   -- the position to base from)
            returns:                
                squares         : [position]                 -- the pair of squares at the position + offset)
            code:
                -- create and return the first square
                block first_square:
                    row    = around_position.row + offset_by        
                    column = around_position.column                 
                    yield square = recycler.new position(row, column)   -- the first square

                -- create and return the second square
                block second_square:
                    row    = around_position.row                    
                    column = around_position.column + offset_by     
                    yield square = recycler.new position(row, column)   -- the second square


        ----------------------------------------------------------------------------------------------------------------
        -- determine whether or not position is within the bounds of this garden
        ----------------------------------------------------------------------------------------------------------------
        method is_within_our_bounds:
            input:
                check_position : position               -- the position to determine if is within our bounds
            returns:
                answer : boolean                        -- whether or not the position is within our bounds
            code:
                -- perform the bounds checks
                top    = check_position.row >= 0                    
                left   = check_position.column >= 0                 
                bottom = check_position.row < rows                  
                right  = check_position.column < columns            

                -- return the answer
                return answer = top and left and bottom and right
