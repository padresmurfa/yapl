--------------------------------------------------------------------------------------------------------------------
-- test the garden module
--------------------------------------------------------------------------------------------------------------------

from garden import garden

--------------------------------------------------------------------------------------------------------------------
-- when exercising the garden class
--------------------------------------------------------------------------------------------------------------------
test class garden:

	----------------------------------------------------------------------------------------------------------------
	-- and the eat_carrots_at method is invoked
	----------------------------------------------------------------------------------------------------------------
	test method eat_carrots_at:
		given:
            at_position = position(row=0, column=0)
        when:
        	eaten = eat_carrots_at(at_position)

xcxc
            code:
                -- determine how many carrots are at our position
                eaten = get_carrots(at_position)

                -- clear the carrots at our position
                row   = my_carrot_matrix.get(item_at=at_position.row)
                row.set(item_at=at_position.col, value=0)

                -- return the number of carrots that we ate
                return eaten

	----------------------------------------------------------------------------------------------------------------
	-- and invoking the get_possible_center_values generator 
	----------------------------------------------------------------------------------------------------------------
	test generator get_possible_center_values:
		when:
			possibilities = get_possible_center_values(for_length)

    	--------------------------------------------------------------------------------------------------------
    	-- and the length is odd, then a single possible center is returned
    	--------------------------------------------------------------------------------------------------------
    	scenario odd:
    		given:
    			for_length = 1
			then:
				possibilities == [ 0 ]

    	--------------------------------------------------------------------------------------------------------
    	-- and the length is even, then a pair of possible centers are returned
    	--------------------------------------------------------------------------------------------------------
    	scenario even:
    		given:
    			for_length = 2
			then:
				possibilities == [ 1, 0 ]

	----------------------------------------------------------------------------------------------------------------
	-- and invoking the pair_of_squares generator 
	----------------------------------------------------------------------------------------------------------------
	test generator pair_of_squares:
		given:
			around_position = position(row=0, column=0)
		when:
			squares = pair_of_squares(offset_by, around_position)
		then:
			squares == []

        ------------------------------------------------------------------------------------------------------------
        -- and the offset is positive, then two squares are returned
        ------------------------------------------------------------------------------------------------------------
        scenario positive_offset:
        	given:
				offset_by = 1
			then:
				first_square.row == 1
				first_square.column == 0
				first_square.square == position(row=1, column=0)
				second_square.row == 0
				second_square.column == 1
				second_square.square == position(row=0, column=1)

        ------------------------------------------------------------------------------------------------------------
        -- and the offset is negative, then two squares are returned
        ------------------------------------------------------------------------------------------------------------
        scenario negative_offset:
        	given:
				offset_by = -1
			then:
				first_square.row == -1
				first_square.column == 0
				first_square.square == position(row=-1, column=0)
				second_square.row == 0
				second_square.column == -1
				second_square.square == position(row=0, column=-1)

	----------------------------------------------------------------------------------------------------------------
	-- and invoking the is_within_our_bounds method 
	----------------------------------------------------------------------------------------------------------------
	test method is_within_our_bounds:
		given:
			rows    = 1 
			columns = 1
			check_position = position(row=0, column=0)
		when:
			answer = is_within_our_bounds(check_position)
		then:
			top    == true
			left   == true
			bottom == true
			right  == true

		------------------------------------------------------------------------------------------------------------
		-- and the input is within our boundaries
		------------------------------------------------------------------------------------------------------------
		test within_boundaries:
			then:
				answer == true

		------------------------------------------------------------------------------------------------------------
		-- and the input violates our boundaries
		------------------------------------------------------------------------------------------------------------
		test boundary_violations:
			then:
				answer == false

			--------------------------------------------------------------------------------------------------------
			-- and the violation occurs on row boundaries
			--------------------------------------------------------------------------------------------------------
			test rows:

				----------------------------------------------------------------------------------------------------
				-- then returns false if the position's row is less than 0
				----------------------------------------------------------------------------------------------------
				scenario:
					given:
						check_position.row = -1
					then:
						top == false

				----------------------------------------------------------------------------------------------------
				-- then returns false if the position's row is greater-than-or-equal-to the row count
				----------------------------------------------------------------------------------------------------
				scenario:
					given:
						check_position.row = rows
					then:
						bottom == false

			--------------------------------------------------------------------------------------------------------
			-- and the violation occurs on column voundaries
			--------------------------------------------------------------------------------------------------------
			test column:

				----------------------------------------------------------------------------------------------------
				-- then returns false if the position's column is less than 0
				----------------------------------------------------------------------------------------------------
				scenario:
					given:
						check_position.column = -1
					then:
						left == false

				----------------------------------------------------------------------------------------------------
				-- then returns false if the position's column is greater-than-or-equal-to the column count
				----------------------------------------------------------------------------------------------------
				scenario:
					given:
						check_position.column = columns
					then:
						right == false
