------------------------------------------------------------------------------------------------------------------------
-- Contains the Rabbit class, an abstraction for a hungry, foraging rabbit
------------------------------------------------------------------------------------------------------------------------
module rabbit


from garden import garden
from types  import carrot_matrix, carrots, position


export rabbit


------------------------------------------------------------------------------------------------------------------------
-- An abstraction for a hungry, foraging, rabbit
------------------------------------------------------------------------------------------------------------------------
type rabbit : class:


    --------------------------------------------------------------------------------------------------------------------
    -- public constructor
    --------------------------------------------------------------------------------------------------------------------


        ----------------------------------------------------------------------------------------------------------------
        -- Initialize a rabbit
        ----------------------------------------------------------------------------------------------------------------
        constructor:
            input:
                forage_in_garden : garden               -- the garden that the rabbit should forage in
            code:
                the_farmers_garden = forage_in_garden
                possible_centers   = garden.get_possible_centers()
                rabbit_position    = choose_best_square(squares=possible_centers)


    --------------------------------------------------------------------------------------------------------------------
    -- public methods
    --------------------------------------------------------------------------------------------------------------------


        ----------------------------------------------------------------------------------------------------------------
        -- Make the rabbit go foraging for carrots in the garden.
        ----------------------------------------------------------------------------------------------------------------
        method forage:
            returns:
                eaten : carrots                    -- the number of carrots that the rabbit ate during its foraging spree
            code:
                eaten = 0

                -- continuiously eat carrots, while carrots are to be had
                repeat:
                    eaten ~= eaten + eat_carrots()
                while should_move ~= move()

                -- return the number of carrots that we ate
                return eaten


    --------------------------------------------------------------------------------------------------------------------
    -- private state
    --------------------------------------------------------------------------------------------------------------------


        ----------------------------------------------------------------------------------------------------------------
        -- The 'garden' that this Rabbit is foraging in
        ----------------------------------------------------------------------------------------------------------------
        member the_farmers_garden : garden

        ----------------------------------------------------------------------------------------------------------------
        -- The position of this Rabbit within 'garden'
        ----------------------------------------------------------------------------------------------------------------
        member rabbit_position : position, and mutable



    --------------------------------------------------------------------------------------------------------------------
    -- private helper methods
    --------------------------------------------------------------------------------------------------------------------


        ----------------------------------------------------------------------------------------------------------------
        -- Choose the best square to forage in next, from among the specified squares
        ----------------------------------------------------------------------------------------------------------------
        method choose_best_square:
            input:
                squares : [position] and length() == 2      -- the squares to choose from
            returns:
                best_square = position                      -- the square that was determined to be the best
            code:
                return best_square = squares.max_by(the_farmers_garden.get_carrots) -- xcxc max_by??? .get_carrots???


        ----------------------------------------------------------------------------------------------------------------
        -- Eat the carrots at the rabbit's current position
        ----------------------------------------------------------------------------------------------------------------
        method eat_carrots:
            returns:
                eaten : carrots                         -- The number of carrots that were eaten
            code:
                return eaten = the_farmers_garden.eat_carrots(at_position=rabbit_position)


        ----------------------------------------------------------------------------------------------------------------
        -- Move the rabbit to the best possible square, from the current position, for foraging.
        ----------------------------------------------------------------------------------------------------------------
        method move:
            returns:
                moved : boolean                         -- True if the rabbit moved. False otherwise
            code:
                choices = the_farmers_garden.get_possible_moves(around_position=rabbit_position)

                -- let the rabbit go to sleep, if it couldn't move
                if is_empty = choices are empty:
                    return moved = false

                -- look around, and move to the best neighboring square for carrot munching
                else:
                    rabbit_position ~= choose_best_square(squares=choices)
                    return moved = true
