----------------------------------------------------------------------------------------------------------------------------
-- A solution to the Hungry Rabbit problem
--
-- This is the entry point for a YAPL based solution of the "Hungry Rabbit" interview question described here:
--
--     https://medium.com/@internetross/a-particularly-wascally-wabbit-lessons-from-my-annals-of-software-eng-interviews-7fd7574f009b
--
-- The problem statement is:
--
--     A very hungry rabbit is placed in the center of of a garden, represented by a rectangular N x M 2D matrix.
--     The values of the matrix will represent numbers of carrots available to the rabbit in each square of the garden.
--     If the garden does not have an exact center, the rabbit should start in the square closest to the center with the
--     highest carrot count. On a given turn, the rabbit will eat the carrots available on the square that it is on, and
--     then move up, down, left, or right, choosing the the square that has the most carrots. If there are no carrots
--     left on any of the adjacent squares, the rabbit will go to sleep. You may assume that the rabbit will never have
--     to choose between two squares with the same number of carrots. Write a function which takes a garden matrix and
--     returns the number of carrots the rabbit eats. You may assume the matrix is rectangular with at least 1 row and
--     1 column, and that it is populated with non-negative integers.
--
--     For example:
--     [
--         [5, 7, 8, 6, 3],
--         [0, 0, 7, 0, 4],
--         [4, 6, 3, 4, 9],
--         [3, 1, 0, 5, 8]
--     ]
--
--     Should return:
--
--     27
----------------------------------------------------------------------------------------------------------------------------
module hungry_rabbit:


    public types:


        --------------------------------------------------------------------------------------------------------------------
        -- An unsigned integer, representing a number of carrots.
        --------------------------------------------------------------------------------------------------------------------
        type carrots is integer and >= 0 and <= 100


        --------------------------------------------------------------------------------------------------------------------
        -- A 2-dimensional array, representing a garden. Each value in the array represents the number of
        -- carrots that can be found in that square of the garden.
        --------------------------------------------------------------------------------------------------------------------
        type carrot_matrix is matrix[rows, columns] of carrots and not carrot_matrix.empty()


        --------------------------------------------------------------------------------------------------------------------
        -- A (possibly out-of-bounds) square position within a garden.
        --------------------------------------------------------------------------------------------------------------------
        type position is structure:


            ----------------------------------------------------------------------------------------------------------------
            -- The row offset, corresponding to the outermost array in a 2-dimensional array that
            -- represents a garden.
            ----------------------------------------------------------------------------------------------------------------
            member row is integer and >= 0 and <= 1000

            ----------------------------------------------------------------------------------------------------------------
            -- The column offset, corresponding to the innermost array in the 2-dimensional array that
            -- represents a garden.
            ----------------------------------------------------------------------------------------------------------------
            member column is integer and >= 1 and <= 1000


    ------------------------------------------------------------------------------------------------------------------------
    -- The singleton containing the main entry point of the executable
    ------------------------------------------------------------------------------------------------------------------------
    singleton hungry_rabbit:


        public interface:


            ----------------------------------------------------------------------------------------------------------------
            -- The main entry point of the executable
            ----------------------------------------------------------------------------------------------------------------
            method main:
                code:
                    -- solve the hungry rabbit problem, given this garden
                    eaten = forage(carrot_matrix_to_forage=garden)


        private state:


            ----------------------------------------------------------------------------------------------------------------
            -- Our garden
            ----------------------------------------------------------------------------------------------------------------
            member garden is matrix(4,5) of integer = (
                5, 7, 8, 6, 3,
                0, 0, 7, 0, 4,
                4, 6, 3, 4, 9,
                3, 1, 0, 5, 8
            )


        private helper methods:


            ----------------------------------------------------------------------------------------------------------------
            -- Spawn a hungry rabbit, and make it go foraging for carrots in a garden
            ----------------------------------------------------------------------------------------------------------------
            method forage:
                input:
                    carrot_matrix_to_forage is carrot_matrix -- the initial state of the garden
                returns:
                    eaten is carrots -- the number of carrots that the rabbit ate during its foraging spree
                code:
                    -- instantiate our rabbit and garden abstractions
                    the_garden = garden(using_initial_state=carrot_matrix_to_forage)
                    the_rabbit = rabbit(forage_in_garden=the_garden)

                    -- let the rabbit loose in the garden
                    return eaten = the_rabbit.forage()

