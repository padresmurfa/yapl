------------------------------------------------------------------------------------------------------------------------
-- test the abstraction for a hungry, foraging, rabbit
------------------------------------------------------------------------------------------------------------------------
unit test rabbit:


    --------------------------------------------------------------------------------------------------------------------
    -- test the public constructor
    --------------------------------------------------------------------------------------------------------------------


        ----------------------------------------------------------------------------------------------------------------
        -- test the scenario of constructing a rabbit object
        ----------------------------------------------------------------------------------------------------------------
        scenario constructor:
        	given:
        		forage_in_garden = fake garden
        		forage_in_garden.get_possible_centers.possible_centers = fake collection of position
        		choose_best_square.best_square = fake position
        	when:
        		constructor(forage_in_garden)
        	then:
        		the_farmers_garden == forage_in_garden
        		possible_centers == forage_in_garden.get_possible_centers.possible_centers
        		rabbit_position == choose_best_square.best_square


    --------------------------------------------------------------------------------------------------------------------
    -- test the public methods
    --------------------------------------------------------------------------------------------------------------------


        ----------------------------------------------------------------------------------------------------------------
        -- test making the rabbit go foraging for carrots in the garden.
        ----------------------------------------------------------------------------------------------------------------
        suite forage:
    		given:
                the_farmers_garden   = fake garden
                rabbit_position      = fake position
    		when:
    			eat_and_cant_move()


	        ------------------------------------------------------------------------------------------------------------
	        -- test the scenario when the rabbit eats some carrots, and then moves on to another square
	        ------------------------------------------------------------------------------------------------------------
        	scenario eat_and_move:
        		given:
        			moved 				 = [true, false]
        			ate_carrots 		 = [1, 2]
        		then:
        			eaten == 3


	        ------------------------------------------------------------------------------------------------------------
	        -- test the scenario when the rabbit eats some carrots, but has no where to go, thus going to sleep
	        ------------------------------------------------------------------------------------------------------------
        	scenario eat_and_cant_move:
        		given:
        			moved 				 = false
        			ate_carrots 		 = 1
        		then:
        			eaten == 1


    --------------------------------------------------------------------------------------------------------------------
    -- test the private helper methods
    --------------------------------------------------------------------------------------------------------------------


        ----------------------------------------------------------------------------------------------------------------
        -- test choosing the best square to forage in next, from among the specified squares
        ----------------------------------------------------------------------------------------------------------------
        suite choose_best_square:
        	given:
        		position_1 = fake position
        		position_2 = fake position
        		squares = collection(position_1, position_2)
    		when:
    			choose_best_square(squares)


	        ------------------------------------------------------------------------------------------------------------
	        -- test the scenario where an earlier position is the best square
	        ------------------------------------------------------------------------------------------------------------
	        scenario earlier_is_better choose_best_square:
	        	given:
	        		the_farmers_garden.get_carrots(position_1).got_carrots = 2
	        		the_farmers_garden.get_carrots(position_2).got_carrots = 1
				then:
					best_square == position_1


	        ------------------------------------------------------------------------------------------------------------
	        -- test the scenario where a latter position is the best square
	        ------------------------------------------------------------------------------------------------------------
	        scenario earlier_is_better choose_best_square:
	        	given:
	        		the_farmers_garden.get_carrots(position_1).got_carrots = 1
	        		the_farmers_garden.get_carrots(position_2).got_carrots = 2
				then:
					best_square == position_2


        ----------------------------------------------------------------------------------------------------------------
        -- test eating the carrots at the rabbit's current position
        ----------------------------------------------------------------------------------------------------------------
        scenario eat_carrots:
        	given:
        		rabbit_position = fake position
        		the_position = rabbit_position
        		the_farmers_garden.eat_carrots(at_position=the_position).eaten = 7
    		when:
    			eat_carrots()
			then:
				eaten == 7


        ----------------------------------------------------------------------------------------------------------------
        -- test moving the rabbit to the best possible square, from the current position, for foraging.
        ----------------------------------------------------------------------------------------------------------------
        suite move:


	        ------------------------------------------------------------------------------------------------------------
	        -- test the scenario when there is no where for the rabbit to go
	        ------------------------------------------------------------------------------------------------------------
	        scenario no_choices:
	        	given:
	        		rabbit_position = fake position
	        		current_position = rabbit_position
	        		possible_moves = collection()
	        		the_farmers_garden.get_possible_moves(around_position=current_position).moves = possible_moves
        		when:
        			move()
    			then:
    				moved == false
    				rabbit_position == current_position


	        ------------------------------------------------------------------------------------------------------------
	        -- test the scenario when there is no where for the rabbit to go
	        ------------------------------------------------------------------------------------------------------------
	        scenario no_choices:
	        	given:
	        		rabbit_position = fake position
	        		current_position = rabbit_position
	        		new_position = fake position
	        		possible_moves = collection(new_position)
	        		the_farmers_garden.get_possible_moves(around_position=current_position).moves = possible_moves
        		when:
        			move()
    			then:
    				moved == true
    				rabbit_position == new_position
