------------------------------------------------------------------------------------------------------------------------
-- test the abstraction for a hungry, foraging, rabbit
------------------------------------------------------------------------------------------------------------------------
unit test rabbit:


    --------------------------------------------------------------------------------------------------------------------
    -- test the public constructor
    --------------------------------------------------------------------------------------------------------------------


        ----------------------------------------------------------------------------------------------------------------
        -- test the scenario of constructing a rabbit object
        ----------------------------------------------------------------------------------------------------------------
        scenario constructor:
        	given:
        		forage_in_garden = fake garden
        		forage_in_garden.get_possible_centers.possible_centers = fake collection of position
        		choose_best_square.best_square = fake position
        	when:
        		constructor(forage_in_garden)
        	then:
        		the_farmers_garden == forage_in_garden
        		possible_centers == forage_in_garden.get_possible_centers.possible_centers
        		rabbit_position == choose_best_square.best_square


    --------------------------------------------------------------------------------------------------------------------
    -- test the public methods
    --------------------------------------------------------------------------------------------------------------------


        ----------------------------------------------------------------------------------------------------------------
        -- Make the rabbit go foraging for carrots in the garden.
        ----------------------------------------------------------------------------------------------------------------
        method forage:
            returns:
                eaten is carrots -- the number of carrots that the rabbit ate during its foraging spree
            code:
                eaten = 0

                -- continuously eat carrots, while carrots are to be had
                repeat:
                    eaten = eaten + eat_carrots()
                while should_move = move()

                -- return the number of carrots that we ate
                return eaten


    --------------------------------------------------------------------------------------------------------------------
    -- test the private helper methods
    --------------------------------------------------------------------------------------------------------------------


        ----------------------------------------------------------------------------------------------------------------
        -- Choose the best square to forage in next, from among the specified squares
        ----------------------------------------------------------------------------------------------------------------
        method choose_best_square:
            input:
                squares is collection of position and squares.length() == 2 -- the squares to choose from
            returns:
                best_square is position -- the square that was determined to be the best
            code:
                -- determine the first position and carrot count
                first_position = squares.first()
                first_carrots = the_farmers_garden.get_carrots(first_position)
 
                -- determine the second position and carrot count
                second_position = squares.last()
                second_carrots = the_farmers_garden.get_carrots(second_position)

                -- compare the squares and return the best square for foraging
                if first_carrots > second_carrots:
                    return result = first_position
                else:
                    return result = second_position


        ----------------------------------------------------------------------------------------------------------------
        -- Eat the carrots at the rabbit's current position
        ----------------------------------------------------------------------------------------------------------------
        method eat_carrots:
            returns:
                eaten is carrots -- The number of carrots that were eaten
            code:
                return eaten = the_farmers_garden.eat_carrots(at_position=rabbit_position)


        ----------------------------------------------------------------------------------------------------------------
        -- Move the rabbit to the best possible square, from the current position, for foraging.
        ----------------------------------------------------------------------------------------------------------------
        method move:
            returns:
                moved is boolean -- true if the rabbit moved. false otherwise
            code:
                choices = the_farmers_garden.get_possible_moves(around_position=rabbit_position)

                -- let the rabbit go to sleep, if it couldn't move
                if is_empty = choices are empty:
                    return moved = false

                -- look around, and move to the best neighboring square for carrot munching
                else:
                    rabbit_position = choose_best_square(squares=choices)
                    return moved = true
