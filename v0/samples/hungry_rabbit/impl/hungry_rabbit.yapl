/*
    This is the entry point for a YAPL based solution of the "Hungry Rabbit" interview question described here:
    * https://medium.com/@internetross/a-particularly-wascally-wabbit-lessons-from-my-annals-of-software-eng-interviews-7fd7574f009b

    The problem statement is:

        A very hungry rabbit is placed in the center of of a garden,
        represented by a rectangular N x M 2D matrix.
        The values of the matrix will represent numbers of carrots
        available to the rabbit in each square of the garden. If the garden
        does not have an exact center, the rabbit should start in the
        square closest to the center with the highest carrot count.
        On a given turn, the rabbit will eat the carrots available on the
        square that it is on, and then move up, down, left, or right,
        choosing the the square that has the most carrots. If there are no
        carrots left on any of the adjacent squares, the rabbit will go to
        sleep. You may assume that the rabbit will never have to choose
        between two squares with the same number of carrots.
        Write a function which takes a garden matrix and returns the number
        of carrots the rabbit eats. You may assume the matrix is rectangular
        with at least 1 row and 1 column, and that it is populated with non-
        negative integers.

        For example:
        [[5, 7, 8, 6, 3],
        [0, 0, 7, 0, 4],
        [4, 6, 3, 4, 9],
        [3, 1, 0, 5, 8]]

        Should return:

        27
*/
module hungry_rabbit {
    import * from types
    import Rabbit from rabbit
    import Garden from garden

    // Let the rabbit go foraging for carrots in a garden. This is the main entry point of the module.
    // matrix: the initial state of the garden.
    // eaten: the number of carrots that the rabbit ate during its foraging spree.
    function forage(matrix:Matrix) returns eaten:Carrots {
        garden = Garden(matrix)
        rabbit = Rabbit(garden)
        eaten = rabbit.forage()
    }
}
